#!/usr/bin/env bash

# set -e # This setting is telling the script to exit on a command error.
# set -x # You refer to a noisy script.(Used to debugging)
export DEBIAN_FRONTEND=noninteractive

if [ "$(whoami)" != "root" \]; then
	SUDO=sudo
fi

CURRENT_DATE=$(date "+%Y%m%d%H%M%S")

# """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#  Maintainer :- Vallabh Kansagara<vrkansagara@gmail.com> â€” @vrkansagara
#  Note		  :- 
# """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

export XDEBUG_CONFIG="idekey=xdebug"
/usr/bin/php "$@"
# <
# Run "chmod +x" on the file and put it somewhere in your $PATH list, and you can
# then use this instead of php when debugging. For instance, instead of "php
# myscript.php", run "php-xdebug myscript.php" to start the debugger session.

# You are now officially ready to start debugging with PHP. However, if you've
# become stuck at any point then there are plenty of Google tutorials on setting
# up Xdebug, or you can email me and I'll do my best to help.

