" command	action
" %	create a new file
" d	create a new directory
" R	rename the file/directory under the cursor
" D	Delete the file/directory under the cursor

" lazy	mnemonic	open file explorer
" ":e.	:edit .	at current working directory
" ":sp.	:split .	in split at current working directory
" ":vs.	:vsplit .	in vertical split at current working directory
" ":E	:Explore	at directory of current file
" ":Se	:Sexplore	in split at directory of current file
" ":Vex	:Vexplore	in vertical split at directory of current file
Map			Quick Explanation			Link
---			-----------------			----
<	 <F1>	Causes Netrw to issue help
<cr>	Netrw will enter the directory or read the file      |netrw-cr|
<del>	Netrw will attempt to remove the file/directory      |netrw-del|
<c-h>	Edit file hiding list                                |netrw-ctrl-h|
<c-l>	Causes Netrw to refresh the directory listing        |netrw-ctrl-l|
<c-r>	Browse using a gvim server                           |netrw-ctrl-r|
<c-tab> Shrink/expand a netrw/explore window                |netrw-c-tab|
-	Makes Netrw go up one directory                      |netrw--|
	a	Toggles between normal display,                      |netrw-a|
	hiding (suppress display of files matching g:netrw_list_hide)
showing (display only files which match g:netrw_list_hide)
	c	Make browsing directory the current directory        |netrw-c|
	C	Setting the editing window                           |netrw-C|
	d	Make a directory                                     |netrw-d|
	D	Attempt to remove the file(s)/directory(ies)         |netrw-D|
	gb	Go to previous bookmarked directory                  |netrw-gb|
	gd	Force treatment as directory                         |netrw-gd|
	gf	Force treatment as file                              |netrw-gf|
	gh	Quick hide/unhide of dot-files                       |netrw-gh|
	gn	Make top of tree the directory below the cursor      |netrw-gn|
	i	Cycle between thin, long, wide, and tree listings    |netrw-i|
	mb	Bookmark current directory                           |netrw-mb|
	mc	Copy marked files to marked-file target directory    |netrw-mc|
	md	Apply diff to marked files (up to 3)                 |netrw-md|
	me	Place marked files on arg list and edit them         |netrw-me|
	mf	Mark a file                                          |netrw-mf|
	mF	Unmark files                                         |netrw-mF|
	mg	Apply vimgrep to marked files                        |netrw-mg|
	mh	Toggle marked file suffices' presence on hiding list |netrw-mh|
	mm	Move marked files to marked-file target directory    |netrw-mm|
	mp	Print marked files                                   |netrw-mp|
	mr	Mark files using a shell-style |regexp|                |netrw-mr|
	mt	Current browsing directory becomes markfile target   |netrw-mt|
	mT	Apply ctags to marked files                          |netrw-mT|
	mu	Unmark all marked files                              |netrw-mu|
	mv	Apply arbitrary vim   command to marked files        |netrw-mv|
	mx	Apply arbitrary shell command to marked files        |netrw-mx|
	mX	Apply arbitrary shell command to marked files en bloc|netrw-mX|
	mz	Compress/decompress marked files                     |netrw-mz|
	o	Enter the file/directory under the cursor in a new   |netrw-o|
	browser window.  A horizontal split is used.
	O	Obtain a file specified by cursor                    |netrw-O|
	p	Preview the file                                     |netrw-p|
	P	Browse in the previously used window                 |netrw-P|
	qb	List bookmarked directories and history              |netrw-qb|
	qf	Display information on file                          |netrw-qf|
	qF	Mark files using a quickfix list                     |netrw-qF|
	qL	Mark files using a |location-list|                     |netrw-qL|
	r	Reverse sorting order                                |netrw-r|
	R	Rename the designated file(s)/directory(ies)         |netrw-R|
	s	Select sorting style: by name, time, or file size    |netrw-s|
	S	Specify suffix priority for name-sorting             |netrw-S|
	t	Enter the file/directory under the cursor in a new tab|netrw-t|
	u	Change to recently-visited directory                 |netrw-u|
	U	Change to subsequently-visited directory             |netrw-U|
	v	Enter the file/directory under the cursor in a new   |netrw-v|
	browser window.  A vertical split is used.
	x	View file with an associated program                 |netrw-x|
	X	Execute filename under cursor via |system()|           |netrw-X|

	%	Open a new file in netrw's current directory         |netrw-%|

	*netrw-mouse* *netrw-leftmouse* *netrw-middlemouse* *netrw-rightmouse*
	<leftmouse>	(gvim only) selects word under mouse as if a <cr>
had been pressed (ie. edit file, change directory)
	<middlemouse>	(gvim only) same as P selecting word under mouse;
	see |netrw-P|
	<rightmouse>	(gvim only) delete file/directory using word under
	mouse
	<2-leftmouse>	(gvim only) when:
	* in a netrw-selected file, AND
	* |g:netrw_retmap| == 1       AND
	* the user doesn't already have a <2-leftmouse>
	mapping defined before netrw is autoloaded,
	then a double clicked leftmouse button will return
	to the netrw browser window.  See |g:netrw_retmap|.
	<s-leftmouse>	(gvim only) like mf, will mark files.  Dragging
	the shifted leftmouse will mark multiple files.
(see |netrw-mf|)

(to disable mouse buttons while browsing: |g:netrw_mousemaps|)

	*netrw-quickcom* *netrw-quickcoms*
	QUICK REFERENCE: COMMANDS	*netrw-explore-cmds* *netrw-browse-cmds* {{{2
		:NetrwClean[!]............................................|netrw-clean|
			:NetrwSettings............................................|netrw-settings|
			:Ntree....................................................|netrw-ntree|
			:Explore[!]  [dir] Explore directory of current file......|netrw-explore|
			:Hexplore[!] [dir] Horizontal Split & Explore.............|netrw-explore|
			:Lexplore[!] [dir] Left Explorer Toggle...................|netrw-explore|
			:Nexplore[!] [dir] Vertical Split & Explore...............|netrw-explore|
			:Pexplore[!] [dir] Vertical Split & Explore...............|netrw-explore|
			:Rexplore          Return to Explorer.....................|netrw-explore|
			:Sexplore[!] [dir] Split & Explore directory .............|netrw-explore|
			:Texplore[!] [dir] Tab & Explore..........................|netrw-explore|
			:Vexplore[!] [dir] Vertical Split & Explore...............|netrw-explore|
			let g:netrw_home=$HOME.'/.vim/'

" Map ,n to open netrw in the current working directory
" nnoremap <Leader>n :edit .<CR>

" hide netrw top message
let g:netrw_banner=0
" tree listing by default
let g:netrw_liststyle=3
" hide vim swap files
let g:netrw_list_hide="^\.sw.*$,^\.*\.sw.*$,^\..*\.un[~]$"
" open files in left window by default
" let g:netrw_chgwin=1
let g:netrw_browse_split = 3

" Value in percentage
let g:netrw_winsize = 25


" remap shift-enter to fire up the sidebar
"nnoremap <silent> <S-CR> :rightbelow 20vs<CR>:e .<CR>
" the same remap as above - may be necessary in some distros
"nnoremap <silent> <C-M> :rightbelow 20vs<CR>:e .<CR>
" remap control-enter to open files in new tab
"nmap <silent> <C-CR> t :rightbelow 20vs<CR>:e .<CR>:wincmd h<CR>
" the same remap as above - may be necessary in some distros
"nmap <silent> <NL> t :rightbelow 20vs<CR>:e .<CR>:wincmd h<CR>

" Open file explorer at right side
":nnoremap <leader><Space> :Vex! .<cr>
" Open file explorer at top side
" :nnoremap <leader>nn :Hex! .<cr>

" https://vi.stackexchange.com/a/13351/2917
function! NetrwOpenMultiTab(current_line,...) range
   " Get the number of lines.
   let n_lines =  a:lastline - a:firstline + 1

   " This is the command to be built up.
   let command = "normal "

   " Iterator.
   let i = 1

   " Virtually iterate over each line and build the command.
   while i < n_lines
      let command .= "tgT:" . ( a:firstline + i ) . "\<CR>:+tabmove\<CR>"
      let i += 1
   endwhile
   let command .= "tgT"

   " Restore the Explore tab position.
   if i != 1
      let command .= ":tabmove -" . ( n_lines - 1 ) . "\<CR>"
   endif

   " Restore the previous cursor line.
   let command .= ":" . a:current_line  . "\<CR>"

   " Check function arguments
   if a:0 > 0
      if a:1 > 0 && a:1 <= n_lines
         " The current tab is for the nth file.
         let command .= ( tabpagenr() + a:1 ) . "gt"
      else
         " The current tab is for the last selected file.
         let command .= (tabpagenr() + n_lines) . "gt"
      endif
   endif
   " The current tab is for the Explore tab by default.

   " Execute the custom command.
   execute command
endfunction

" Define mappings.
augroup NetrwOpenMultiTabGroup
   autocmd!
   autocmd Filetype netrw vnoremap <buffer> <silent> <expr> t ":call NetrwOpenMultiTab(" . line(".") . "," . "v:count)\<CR>"
   autocmd Filetype netrw vnoremap <buffer> <silent> <expr> T ":call NetrwOpenMultiTab(" . line(".") . "," . (( v:count == 0) ? '' : v:count) . ")\<CR>"
augroup END

let g:netrw_banner = 0
let g:netrw_list_hide = '^\.\.\=/\=$,.DS_Store,.idea,.git,__pycache__,venv,node_modules,*\.o,*\.pyc,.*\.swp'
let g:netrw_hide = 1
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_liststyle = 4
let g:netrw_winsize = 40
let g:NetrwIsOpen=0

" Per default, netrw leaves unmodified buffers open.  This autocommand
" deletes netrw's buffer once it's hidden (using ':q;, for example)
autocmd FileType netrw setl bufhidden=delete  " or use :qa!

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i 
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Vex!
    endif
endfunction

" Add your own mapping. For example:
nnoremap <silent><leader><space> :call ToggleNetrw()<CR>
